package ccIntegration
public
	with abstracts;
	with controller;
	with data_types;
	with platform;
	with states;
	with Cheddar_Properties;
	with SEI;
	with devices;
	
	
	system cc_rt extends abstracts::cacc
		features
			sensed_speed:       in data port data_types::speed;
			sensed_speed_limit: in data port data_types::speed; 
			power:              in data port;
			
	end cc_rt;
	
	system implementation cc_rt.devices extends abstracts::cacc.devices
		subcomponents
			vehicle_controller: 	refined to process control_rt.impl   	  {Classifier_Substitution_Rule => Type_Extension;};
			interface_controller:	refined to process interface_controller_rt.impl;
			speedometer:		 	refined to device  devices::speedometer_rt.impl 	  {Classifier_Substitution_Rule => Type_Extension;};
			speedometer_handler:	refined to system  devices::speedometer_handler.impl;
			user_interface:	 		refined to device  devices::user_interface_rt.impL {Classifier_Substitution_Rule => Type_Extension;};
			logger: 		 		refined to system  logger_rt.impl;
			this_bus:				bus 	  			platform::generic_bus;
			first_virtual_bus:		virtual bus 		platform::sensor_data_bus; 
			second_virtual_bus:		virtual bus 		platform::sensor_data_bus;  
			this_processor:			processor 			platform::generic_cpu{Cheddar_Properties::Scheduling_Protocol=>(RMS);};
			this_memory: 			memory 	  			platform::Ram.impl;
			throttle_actuator:		refined to device devices::throttle_actuator_rt.impl {Classifier_Substitution_Rule => Type_Extension;};
			brake_actuator:		    refined to device devices::brake_rt.impl 			{Classifier_Substitution_Rule => Type_Extension;};
			speed_controller:		refined to process speed_controller_rt.impl;	
			states:					system states::controller.impl;	
		
		connections
			bus_speedometer: 			bus access this_bus<->speedometer.BA;
			bus_UI: 					bus access this_bus<->user_interface.BA;
			bus_processor:				bus access this_bus<->this_processor.net;
			bus_memory:					bus access this_bus<->this_memory.BA;	
			brake_cont_conn:			port brake_actuator.brake_failed->vehicle_controller.brake_failed;
			
			controller_driverSelection: port vehicle_controller.driverSelection -> states.driverSelection;
			controller_targetSpeed:     port vehicle_controller.targetSpeed -> states.targetSpeed;
			controller_actualSpeed:     port vehicle_controller.actualSpeed -> states.actualSpeed;
			
		properties
			-- bound code/data within the controller to memory
			Actual_Memory_Binding => (reference(this_memory)) applies to vehicle_controller;
			
		annex Resolute{**
				
			prove(print_aadl(this))
			prove (SystemWideReq1())
			prove (SystemWideReq2())
			prove (SystemWideReq3())
			
			
		**};
		
		annex EMV2 {**
			use types error_library; 
			use behavior error_library::stateMachine;
			
			composite error behavior
				states
					[speedometer_handler.Failed]-> Failed;
					[speedometer_handler.Operational]->  Operational;
			end composite;	
			**};
		
	end cc_rt.devices;
	 
	
	
	-- process 
	process control_rt extends controller::generic_controller
		features
			sensor4_data_in: refined to in data port data_types::speed;
			brake_failed:    refined to in event data port;
		
			
			annex EMV2 {**
				use types     error_library;
				use behavior  error_library::stateMachine;	
		    **};
			
	end control_rt;
	
	process implementation control_rt.impl extends controller::generic_controller.threads
		subcomponents
			thread_speedometer: refined to thread read_speedometer.impl  {Classifier_Substitution_Rule => Type_Extension;};
			thread_controller:  refined to thread thread_controller.impl {Classifier_Substitution_Rule => Type_Extension;};
			control_modal: 	    refined to thread control_modal.impl  	 {Classifier_Substitution_Rule => Type_Extension;};
		connections
			-- connect process w/ threads A
			speedometer_thread_conn: 	port sensor4_data_in->thread_speedometer.sensor_in;
			
			-- connect threads A w/ thread D
		   speedometer_controller_conn: port thread_speedometer.sensor_out->thread_controller.data_in;
			
			-- connect thread C w/ thread D	
			threads_conn: 				port thread_controller.data_out->control_modal.sensor_data;
			-- connect UI w/ thread E (control_modal)
			UI_conn:					feature group UI_inverse_ports -> control_modal.UI_ports;
			-- connect E w/ process
			modal_proc_conn:			port control_modal.feedback->feedback;
			preferences_conn:			port preferences.speed_limit->control_modal.speed_limit;
			-- connect modal w/ process
			modal_coon: 				port control_modal.cmd -> current_speed;
			brake_conn:					port brake_failed->control_modal.brake_failed;
			
		flows	
			UI_sink    		 : flow sink UI_inverse_ports -> UI_conn -> control_modal.UI_sink;
			
--			controller_path1a : flow path sensor4_data_in -> speedometer_thread_conn -> thread_speedometer.thread_path0 -> speedometer_controller_conn
--								-> thread_controller.controller_thread_path0 -> threads_conn -> control_modal.control_modal_path0 ->modal_coon -> current_speed;  
--			
--			controller_path1b : flow path sensor4_data_in -> speedometer_thread_conn -> thread_speedometer.thread_path0 -> speedometer_controller_conn
--								-> thread_controller.controller_thread_path0 -> threads_conn -> control_modal.control_modal_path1 ->modal_proc_conn -> feedback;  
--		
		modes
			manual: initial mode;
			cc: mode;	
			failure: mode;
			
			-- turn on/off	
			manual -[UI_inverse_ports.turn_on_off]-> cc;
			
			-- cc
			cc -[UI_inverse_ports.set_speed_down]-> cc;
			cc -[UI_inverse_ports.turn_on_off]->   manual;
			cc -[UI_inverse_ports.set_speed_up]-> cc;
			cc -[UI_inverse_ports.set_speed_down]-> manual;
			cc -[brake_failed]-> failure;
				
		properties
      		SEI::MIPSBudget => 1350.0 MIPS;
      		SEI::RAMBudget  => 1350.0 MByte;						
	end control_rt.impl;
	
	-- process preferences
	process preferences extends controller::preferences
	end preferences;
	
	process implementation preferences.impl
		properties
      		SEI::MIPSBudget => 1350.0 MIPS;
      		SEI::RAMBudget  => 1350.0 MByte;
	end preferences.impl;
	
	-- threads 
	thread read_speedometer extends controller::read_sensor
		features
			sensor_in:   refined to in data port data_types::speed;
	end read_speedometer;
	
	thread implementation read_speedometer.impl
	end read_speedometer.impl;
	
	thread thread_controller extends controller::thread_controller
	features
		data_in:   refined to in data port;
	end thread_controller;
	
	thread implementation thread_controller.impl 
	end thread_controller.impl;
	
	thread control_modal extends controller::control_modal
		features
			brake_failed:  in event port;
	end control_modal;
	
	thread implementation control_modal.impl 
	end control_modal.impl;
	
	system logger_rt extends abstracts::logger
	end logger_rt;
	
	system implementation logger_rt.impl extends abstracts::logger.impl
	end logger_rt.impl;
	
	
	-- process interface controller
	process interface_controller_rt extends abstracts::interface_controller
	end interface_controller_rt;
	
	process implementation interface_controller_rt.impl extends abstracts::interface_controller.impl
		properties
      		SEI::MIPSBudget => 1350.0 MIPS;
      		SEI::RAMBudget => 1350.0 MByte;
	end interface_controller_rt.impl;
	
	-- process speed controller
	process speed_controller_rt extends controller::speed_controller
	end speed_controller_rt;
	
	process implementation speed_controller_rt.impl extends controller::speed_controller.impl
		properties
      		SEI::MIPSBudget => 1350.0 MIPS;
      		SEI::RAMBudget => 1350.0 MByte;
	end speed_controller_rt.impl;
	
	
end ccIntegration;